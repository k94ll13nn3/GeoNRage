<input type="number"
       value="@Value"
       disabled="@Disabled"
       @onchange="Send"
       @oninput="OnInput"
       @onkeydown="@OnKeydown"
       @onkeydown:preventDefault="@PreventKey"
       @onfocus="@((e)=> OnFocus(true))"
       @onblur="@((e)=> OnFocus(false))" />

@code {
    [Parameter]
    public int Value { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public EventCallback<int> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<bool> FocusChanged { get; set; }

    private bool PreventKey { get; set; }

    private void OnKeydown(KeyboardEventArgs args)
    {
        this.PreventKey = false;
        if (args.Key == "Tab" || args.Key == "Backspace" || args.Key == "Enter")
        {
            return;
        }

        if (!int.TryParse(Value.ToString() + args.Key, out var value) || value < 0)
        {
            this.PreventKey = true;
        }
    }

    private void OnInput(ChangeEventArgs e)
    {
        var newValue = e?.Value?.ToString();
        Value = int.Parse(string.IsNullOrWhiteSpace(newValue) ? "0" : newValue);
    }

    private async Task OnFocus(bool focused)
    {
        await FocusChanged.InvokeAsync(focused);
    }

    private async Task Send()
    {
        await ValueChanged.InvokeAsync(Value);
    }
}
