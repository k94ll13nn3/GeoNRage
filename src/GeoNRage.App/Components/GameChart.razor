@using System.Drawing;
@using ChartJs.Blazor;
@using ChartJs.Blazor.Common;
@using ChartJs.Blazor.Common.Axes;
@using ChartJs.Blazor.Common.Enums;
@using ChartJs.Blazor.LineChart;
@using ChartJs.Blazor.Util;

@inject GeoNRage.App.Apis.IGamesApi GamesApi

<Chart Config="PlotConfig" Height="500" Width="800" @ref="Chart"></Chart>

@code{
    public LineConfig PlotConfig { get; set; } = new LineConfig
    {
        Options = new LineOptions
        {
            Responsive = true,
            Title = new OptionsTitle
            {
                Display = true,
                Text = "Scores"
            },
            Tooltips = new Tooltips
            {
                Mode = InteractionMode.Nearest,
                Intersect = true
            },
            Hover = new Hover
            {
                Mode = InteractionMode.Nearest,
                Intersect = true
            },
            Scales = new Scales
            {
                XAxes = new List<CartesianAxis>
            {
                    new CategoryAxis
                    {
                        ScaleLabel = new ScaleLabel
                        {
                            LabelString = "Round"
                        }
                    }
                },
                YAxes = new List<CartesianAxis>
            {
                    new LinearCartesianAxis
                    {
                        ScaleLabel = new ScaleLabel
                        {
                            LabelString = "Score"
                        }
                    }
                }
            }
        }
    };

    [Parameter]
    public int GameId { get; set; }

    public Chart Chart { get; set; } = null!;

    public Game Game { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        Game = await GamesApi.GetAsync(GameId);

        await CreatePlotAsync();
    }

    private async Task CreatePlotAsync()
    {
        foreach (string item in Game.Maps.SelectMany(x => Enumerable.Range(1, 5).Select(y => $"{x.Name[0]}_R{y}")))
        {
            PlotConfig.Data.Labels.Add(item);
        }

        var colors = new List<Color>()
    {
            Color.FromArgb(255, 99, 132),
            Color.FromArgb(255, 159, 64),
            Color.FromArgb(255, 205, 86),
            Color.FromArgb(75, 192, 192),
            Color.FromArgb(54, 162, 235),
            Color.FromArgb(153, 102, 255),
            Color.FromArgb(201, 203, 207)
        };

        int colorIndex = 0;
        foreach (Player player in Game.Players)
        {
            IDataset<int> dataset = new LineDataset<int>()
            {
                Label = player.Name,
                BackgroundColor = ColorUtil.FromDrawingColor(colors[colorIndex % colors.Count]),
                BorderColor = ColorUtil.FromDrawingColor(colors[colorIndex % colors.Count]),
                Fill = FillingMode.Disabled
            };

            PlotConfig.Data.Datasets.Add(dataset);
            colorIndex++;
            await UpdatePlotAsync(player);
        }
    }

    private async Task UpdatePlotAsync(Player player)
    {

        int sum = 0;
        var scores = new List<int>();
        var values = new List<int>();
        foreach (Map map in Game.Maps)
        {
            for (int i = 0; i < Game.Rounds; i++)
            {
                values.Add(Game[map.Id, player.Id, i + 1]);
            }
        }

        foreach (int score in values.TakeWhile(x => x > 0))
        {
            sum += score;
            scores.Add(sum);
        }

        Dataset<int> dataset = (PlotConfig.Data.Datasets.First(x => (x as LineDataset<int>)?.Label == player.Name) as Dataset<int>)!;
        dataset.Clear();
        dataset.AddRange(scores);
        await Chart.Update();
    }

    public async Task UpdateAsync(int mapId, int playerId, int round, int score)
    {
        Game[mapId, playerId, round] = score;
        await UpdatePlotAsync(Game.Players.First(x => x.Id == playerId));
    }
}
