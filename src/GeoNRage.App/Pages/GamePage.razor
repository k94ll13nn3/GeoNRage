@page "/games/{Id:int}"

@using GeoNRage.App.Components.Games

<Container Condition="HubClosed">
    <p>Connexion avec le serveur perdue, reconnexion echouée.</p>
</Container>

<Container Condition="HubReconnecting">
    <p>Connexion avec le serveur perdue, tentative de reconnexion...</p>
</Container>

<Container Condition="HubReconnected">
    <p>
        Connexion avec le serveur rétablie. Vous pouvez à nouveau envoyer et recevoir des données, cependant les données reçues
        pendant la tentative de reconnexion ne seront pas mise à jour.
    </p>
    <button @onclick="ReloadPageAsync">Rafraichir la page</button>
</Container>

<Container Condition="Loaded && GameFound">
    <h1>@Game.Name — @Game.Date.ToShortDateString()</h1>

    <div class="container">
        <table class="ma-5">
            <Repeater Items="Game.Maps" Context="map">
                <tr>
                    <th>@map.Name</th>
                    <Repeater Items="Game.Players" Context="player">
                        <th>@player.Name</th>
                    </Repeater>
                </tr>

                <Repeater Items="Enumerable.Range(1, Game.Rounds)" Context="round">
                    <tr>
                        <th>Round @round</th>
                        <Repeater Items="Game.Players" Context="player">
                            @{
                                var key = $"{map.Id}_{player.Id}_{round}";
                            }
                            <td>
                                <NumericInput @key="@key" InitialValue="@Game[map.Id, player.Id, round]" ValueChanged="@(async (e) => { await SendAsync(map.Id, player.Id, round, e);})" Disabled="@Game.Locked" Class="@(Game[map.Id, player.Id, round] == 5000 ? "perfect" : "")"></NumericInput>
                            </td>
                        </Repeater>
                    </tr>
                </Repeater>

                <tr>
                    <th>Total @map.Name</th>
                    <Repeater Items="Game.Players" Context="player">
                        <td>@Game.Values.Where(v => v.MapId == map.Id && v.PlayerId == player.Id).Sum(v => v.Score)</td>
                    </Repeater>
                </tr>
            </Repeater>

            <tr style="border-bottom: 1px solid #000;"></tr>

            <tr class="bordered">
                <th>Total </th>
                <Repeater Items="Game.Players" Context="player">
                    <td>@Game.Values.Where(v => v.PlayerId == player.Id).Sum(v => v.Score)</td>
                </Repeater>
            </tr>
        </table>

        <div class="ma-5">
            <GameRankings Game="@Game"></GameRankings>

            <GameChart Game="@Game" @ref="Chart"></GameChart>
        </div>
    </div>
</Container>

<Container Condition="!Loaded && GameFound">
    <LoadingAnimation>
        Chargement de la partie @(Id)...
    </LoadingAnimation>
</Container>

<Container Condition="!GameFound">
    <PageNotFound />
</Container>
