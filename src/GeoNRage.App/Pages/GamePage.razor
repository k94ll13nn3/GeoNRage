@page "/games/{Id:int}"

@using GeoNRage.App.Components.Games

<Container Condition="HubClosed">
    <p>Connexion avec le serveur perdue, reconnexion echouée.</p>
</Container>

<Container Condition="HubReconnecting">
    <p>Connexion avec le serveur perdue, tentative de reconnexion...</p>
</Container>

<Container Condition="HubReconnected">
    <p>
        Connexion avec le serveur rétablie. Vous pouvez à nouveau envoyer et recevoir des données, cependant les données reçues
        pendant la tentative de reconnexion ne seront pas mise à jour.
    </p>
    <button @onclick="ReloadPageAsync">Rafraichir la page</button>
</Container>

<Container Condition="Loaded && GameFound">
    <h1>@Game.Name — @Game.Date.ToShortDateString()</h1>

    <Container Condition="AvailablePlayers.Any()">
        <Expander Expanded="false">
            <select @bind="@SelectedPlayerId">
                @foreach (var player in AvailablePlayers)
                {
                    <option value="@player.Id"> @player.Name </option>
                }
            </select>
            <button @onclick="AddPlayerAsync">Ajouter joueur</button>
        </Expander>
    </Container>

    <div class="container">
        <table class="ma-5">
            <Repeater Items="Game.Challenges" Context="challenge">
                <tr>
                    <th>
                        @challenge.MapName
                        @if (challenge.Link is not null)
                        {
                            <a href="@challenge.Link" target="_blank"> 🔗</a>
                        }
                    </th>
                    <Repeater Items="challenge.PlayerScores" Context="playerScore">
                        <th>@playerScore.PlayerName</th>
                    </Repeater>
                </tr>

                <Repeater Items="Enumerable.Range(1, 5)" Context="round">
                    <tr>
                        <th>Round @round</th>
                        <Repeater Items="challenge.PlayerScores" Context="playerScore">
                            @{
                                var key = $"{challenge.Id}_{playerScore.PlayerId}_{round}";
                            }
                            <td>
                                <NumericInput @key="@key"
                                              InitialValue="@Game[challenge.Id, playerScore.PlayerId, round]"
                                              ValueChanged="@(async (e) => { await SendAsync(challenge.Id, playerScore.PlayerId, round, e);})"
                                              Class="@(Game[challenge.Id, playerScore.PlayerId, round] == 5000 ? "perfect" : "")"></NumericInput>
                            </td>
                        </Repeater>
                    </tr>
                </Repeater>

                <tr>
                    <th>Total</th>
                    <Repeater Items="challenge.PlayerScores" Context="playerScore">
                        <td>@playerScore.Sum</td>
                    </Repeater>
                </tr>
            </Repeater>

            <tr style="border-bottom: 1px solid #000;"></tr>

            <Container Condition="Game.Challenges.Any()">
                <tr class="bordered">
                    <th>Total global</th>
                    <Repeater Items="Game.Challenges.SelectMany(c => c.PlayerScores).GroupBy(p => p.PlayerId)" Context="playerScores">
                        <td>@playerScores.Sum(playerScore => playerScore.Sum)</td>
                    </Repeater>
                </tr>
            </Container>
        </table>

        <div class="ma-5">
            <GameRankings Game="@Game"></GameRankings>

            <GameChart Game="@Game" @ref="Chart"></GameChart>
        </div>
    </div>
</Container>

<Container Condition="!Loaded && GameFound">
    <LoadingAnimation>
        Chargement de la partie @(Id)...
    </LoadingAnimation>
</Container>

<Container Condition="!GameFound">
    <PageNotFound />
</Container>
