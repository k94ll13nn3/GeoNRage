@page "/games/{Id:int}"

@using GeoNRage.App.Pages.Games

<Container Condition="_loaded && _gameFound">
    <PageTitle>@_game.Name</PageTitle>
</Container>

<Container Condition="_loaded && _gameFound && (_user.PlayerId() is null || !_game.Players.Any(p => p.Id == _user.PlayerId()))">
    <div class="notification is-warning error-alert">
        Vous n'êtes pas connecté ou n'êtes pas joueur de la partie, vous ne verrez pas les mises à jour en temps réel.
    </div>
</Container>

<Container Condition="_loaded && _gameFound">
    <div class="container is-fluid is-flex is-align-items-center is-align-self-center is-justify-content-center">
        <div class="card m-3 game-card">
            <header class="card-header">
                <div class="card-header-title is-size-3 game-title" style="display: block">
                    <h1 class="title">@_game.Name</h1>
                    <h2 class="subtitle">@_game.Date.ToShortDateString()</h2>
                </div>
                <div class="card-header-icon">
                    <div class="field has-addons">
                        <Container Condition="_user.PlayerId() is not null && !_game.Players.Any(p => p.Id == _user.PlayerId())">
                            <p class="control">
                                <button class="button" @onclick="AddPlayerAsync">
                                    <span class="is-hidden-touch"></span>
                                    <span class="icon is-small">
                                        <i class="fas fa-plus"></i>
                                    </span>
                                    <span class="is-hidden-touch">Jouer la partie</span>
                                </button>
                            </p>
                        </Container>
                        <Container Condition="_user.PlayerId() is not null && _game.Players.Any(p => p.Id == _user.PlayerId())">
                            <p class="control">
                                <button class="button" @onclick="ShowTauntAsync">
                                    <span class="icon is-small">
                                        <i class="fas fa-angry"></i>
                                    </span>
                                </button>
                            </p>
                        </Container>
                        <Container Condition="!HideScores">
                            <p class="control">
                                <button class="button" @onclick="ShowChartAsync">
                                    <span class="icon is-small">
                                        <i class="fas fa-chart-line"></i>
                                    </span>
                                </button>
                            </p>
                            <p class="control">
                                <button class="button" @onclick="ShowRankingsAsync">
                                    <span class="icon is-small">
                                        <i class="fas fa-table"></i>
                                    </span>
                                </button>
                            </p>
                        </Container>
                    </div>
                </div>
            </header>
            <div class="card-content">
                <div class="table-container">
                    <table>
                        <tbody>
                            <Repeater Items="_game.Challenges" Context="challenge">
                                <tr>
                                    <th>
                                        @challenge.MapName
                                        <a href="https://www.geoguessr.com/challenge/@challenge.GeoGuessrId" target="_blank" class="action-button">
                                            <span class="icon">
                                                <i class="fas fa-link" aria-hidden="true"></i>
                                            </span>
                                        </a>
                                    </th>
                                    <Repeater Items="challenge.PlayerScores" Context="playerScore">
                                        <th>
                                            <div class="is-flex is-flex-direction-row is-align-items-center">
                                                <figure class="my-1 image is-32x32">
                                                    <img class="is-rounded" src="@playerScore.IconUrl">
                                                </figure>
                                                <span class="ml-1">@playerScore.PlayerName</span>
                                            </div>
                                        </th>
                                    </Repeater>
                                </tr>

                                @{
                                    var i = 1;
                                }
                                <Repeater Items="Enumerable.Range(1, 5)" Context="round">
                                    <tr>
                                        <th>Round @round</th>
                                        @{
                                            var j = 1;
                                        }
                                        <Repeater Items="challenge.PlayerScores" Context="playerScore">
                                            @{
                                                var key = $"{challenge.Id}_{playerScore.PlayerId}_{round}";
                                            }
                                            <td>
                                                <Container Condition="_user.PlayerId() == playerScore.PlayerId">
                                                    <ChildContent>
                                                        <NumericInput @key="@key"
                                                                      InitialValue="@_scores[(challenge.Id, playerScore.PlayerId, round)]"
                                                                      ValueChanged="@(async (e) => { await SendAsync(challenge.Id, round, e);})"
                                                                      Class="@($"{(_scores[(challenge.Id, playerScore.PlayerId, round)] == 5000 ? "has-background-success has-text-success-invert" : "")} {(_scores[(challenge.Id, playerScore.PlayerId, round)] == 4999 ? "has-background-warning has-text-warning-invert" : "")} {(_user.PlayerId() != playerScore.PlayerId ? "has-background-info has-text-info-invert" : "")}")"
                                                                      TabIndex="@(i + j)"></NumericInput>
                                                    </ChildContent>
                                                    <ElseContent>
                                                        <Container Condition="HideScores">
                                                            <ChildContent>
                                                                <NumericInput @key="@key"
                                                                              InitialValue="0"
                                                                              Class="has-background-info has-text-info-invert"
                                                                              Disabled="true"></NumericInput>
                                                            </ChildContent>
                                                            <ElseContent>
                                                                <NumericInput @key="@key"
                                                                              InitialValue="@_scores[(challenge.Id, playerScore.PlayerId, round)]"
                                                                              Class="@($"{(_scores[(challenge.Id, playerScore.PlayerId, round)] == 5000 ? "has-background-success has-text-success-invert" : "")} {(_scores[(challenge.Id, playerScore.PlayerId, round)] == 4999 ? "has-background-warning has-text-warning-invert" : "")} {(_user.PlayerId() != playerScore.PlayerId ? "has-background-info has-text-info-invert" : "")}")"
                                                                              Disabled="true"></NumericInput>
                                                            </ElseContent>
                                                        </Container>
                                                    </ElseContent>
                                                </Container>
                                            </td>
                                            @{
                                                j++;
                                            }
                                        </Repeater>
                                        @{
                                            i += 100;
                                        }
                                    </tr>
                                </Repeater>

                                <tr>
                                    <th>Total</th>
                                    <Repeater Items="challenge.PlayerScores" Context="playerScore">
                                        <th>@(_scores.Where(s => s.Key.challengeId == challenge.Id && s.Key.playerId == playerScore.PlayerId).Sum(s => s.Value) ?? 0)</th>
                                    </Repeater>
                                </tr>
                            </Repeater>

                            <Container Condition="_game.Challenges.Any()">
                                <tr class="bordered">
                                    <th>Total global</th>
                                    <Repeater Items="_game.Challenges.SelectMany(c => c.PlayerScores).GroupBy(p => p.PlayerId)" Context="playerScores">
                                        <th>@(_scores.Where(s => s.Key.playerId == playerScores.Key).Sum(s => s.Value) ?? 0)</th>
                                    </Repeater>
                                </tr>
                            </Container>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</Container>

<Container Condition="!_loaded && _gameFound">
    <LoadingAnimation>
        Chargement de la partie @(Id)...
    </LoadingAnimation>
</Container>

<Container Condition="!_gameFound">
    <PageNotFound />
</Container>

@code {
    public static RenderFragment<string> ImageFragment = image => __builder =>
    {
        <figure class="image is-square">
            <img src="@image">
        </figure>
    };
}
